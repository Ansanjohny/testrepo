// analyzeAuthor.js
async function getPRAuthorStats(github, context) {
  const author = context.payload.pull_request.user.login;

  try {
    // Get user data
    const userData = await github.rest.users.getByUsername({
      username: author,
    });

    // Get repositories where user has contributed
    const contributedRepos = await github.rest.search.repos({
      q: `user:${author}`,
      sort: "updated",
      per_page: 100,
    });

    // Get user's public repositories
    const userRepos = await github.rest.repos.listForUser({
      username: author,
      type: "all",
      sort: "updated",
      per_page: 100,
    });

    // Calculate total stars from owned repositories
    const totalStars = userRepos.data.reduce(
      (acc, repo) => acc + repo.stargazers_count,
      0
    );

    // Get user's recent activity
    const activities = await github.rest.activity.listPublicEventsForUser({
      username: author,
      per_page: 100,
    });

    // Count different types of activities in last 100 events
    const activityTypes = activities.data.reduce((acc, event) => {
      acc[event.type] = (acc[event.type] || 0) + 1;
      return acc;
    }, {});

    return {
      author,
      stats: {
        publicRepos: userRepos.data.length,
        contributedRepos: contributedRepos.data.total_count,
        totalStars,
        followers: userData.data.followers,
        following: userData.data.following,
        createdAt: userData.data.created_at,
        recentActivity: activityTypes,
      },
    };
  } catch (error) {
    console.error("Error fetching author stats:", error);
    throw error;
  }
}

function formatStatsComment(stats) {
  return `
## GitHub Activity Stats for @${stats.author}

ðŸ‘¤ Profile Overview:
- Public Repositories: ${stats.stats.publicRepos}
- Contributed to: ${stats.stats.contributedRepos} repositories
- Total Stars Received: ${stats.stats.totalStars}
- Followers: ${stats.stats.followers}
- Following: ${stats.stats.following}
- Account created: ${new Date(stats.stats.createdAt).toDateString()}

### Recent Activity (Last 100 events):
${Object.entries(stats.stats.recentActivity)
  .map(([type, count]) => `- ${type}: ${count}`)
  .join("\n")}

*This comment was automatically generated by PR Stats Action*
    `.trim();
}

async function analyzePRAndComment(github, context) {
  try {
    // Get author statistics
    const authorStats = await getPRAuthorStats(github, context);

    // Format the comment
    const comment = formatStatsComment(authorStats);

    // Post comment on PR
    await github.rest.issues.createComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.issue.number,
      body: comment,
    });

    console.log("Successfully posted PR stats comment");
  } catch (error) {
    console.error("Error in analyzePRAndComment:", error);
    throw error;
  }
}

module.exports = {
  analyzePRAndComment,
};
