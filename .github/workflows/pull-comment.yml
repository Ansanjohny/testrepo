name: PR Author Stats
on:
  pull_request:
    types: [opened]

jobs:
  analyze-pr-author:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Get PR Author Stats
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;

            // Get user data
            const userData = await github.rest.users.getByUsername({
              username: author
            });

            // Get repositories where user has contributed
            const contributedRepos = await github.rest.search.repos({
              q: `user:${author}`,
              sort: 'updated',
              per_page: 100
            });

            // Get user's public repositories
            const userRepos = await github.rest.repos.listForUser({
              username: author,
              type: 'all',
              sort: 'updated',
              per_page: 100
            });

            // Calculate total stars from owned repositories
            const totalStars = userRepos.data.reduce((acc, repo) => 
              acc + repo.stargazers_count, 0
            );

            // Get user's recent activity
            const activities = await github.rest.activity.listPublicEventsForUser({
              username: author,
              per_page: 100
            });

            // Count different types of activities in last 100 events
            const activityTypes = activities.data.reduce((acc, event) => {
              acc[event.type] = (acc[event.type] || 0) + 1;
              return acc;
            }, {});

            // Create markdown comment
            const comment = `
            ## GitHub Activity Stats for @${author}

            ðŸ‘¤ Profile Overview:
            - Public Repositories: ${userRepos.data.length}
            - Contributed to: ${contributedRepos.data.total_count} repositories
            - Total Stars Received: ${totalStars}
            - Followers: ${userData.data.followers}
            - Following: ${userData.data.following}
            - Account created: ${new Date(userData.data.created_at).toDateString()}

            ### Recent Activity (Last 100 events):
            ${Object.entries(activityTypes)
              .map(([type, count]) => `- ${type}: ${count}`)
              .join('\n')}

            *This comment was automatically generated by PR Stats Action*
            `;

            // Post comment on PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
